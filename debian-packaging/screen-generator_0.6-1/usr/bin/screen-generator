#!/bin/bash
#`screen-generator` generates screen configuration files and launches screen by providing chains of commands and/or window configurations
VERSION="v0.5"
#set -x
#set -v
#set -f 

# DEFINE DEFAULT VARIALBES

DEFAULT_EDITOR=${EDITOR:-vim}
SHELL_NAME=$(basename $SHELL)
DEFAULT_NUMBER_OF_LINES=""
DEFAULT_NUMBER_OF_COLUMNS=""
DEFAULT_SHORTCUTS='bindkey "^j" focus down
bindkey "^k" focus up
bindkey "^l" focus right
bindkey "^h" focus left
bindkey "^s" eval split "focus down" screen
bindkey "^v" eval "split -v" "focus right" screen
bindkey "^o" only
bindkey "^y" quit'

HORIZONTAL_DISTANCE=31

# DEFINE DEBUG FUNCTION

function echo-debug(){
    
    if [ "$CHECK_v" -eq 1 ]
        then
            echo $@
        fi
}
function cat-debug(){
    
    if [ "$CHECK_v" -eq 1 ]
        then
            cat $@
        fi
}

# DEFINE DISPLAY FUNCTIONS

function echo-word-middle(){
WORD=$@
NUMBER_OF_SPACES_SURROUNDING_THE_WORD=1
TERMINAL_WIDTH=$(tput cols)
WORD_SIZE=$(($(echo "$@" | wc -c ) -1 ))
NUMBER_OF_SYMBOLS=$(( $TERMINAL_WIDTH - $WORD_SIZE - 2*$NUMBER_OF_SPACES_SURROUNDING_THE_WORD ))
LENGTH_OF_RIGHT_PART=$((NUMBER_OF_SYMBOLS/2 + $NUMBER_OF_SYMBOLS%2/2 ))
LENGTH_OF_LEFT_PART=$(( $TERMINAL_WIDTH - $WORD_SIZE -2*NUMBER_OF_SPACES_SURROUNDING_THE_WORD - $LENGTH_OF_RIGHT_PART      ))

printf '%*s' "$LENGTH_OF_RIGHT_PART" '' | tr " " -
printf '%*s' $NUMBER_OF_SPACES_SURROUNDING_THE_WORD
printf "$WORD"
printf '%*s' $NUMBER_OF_SPACES_SURROUNDING_THE_WORD
printf '%*s\n' "$LENGTH_OF_LEFT_PART" '' | tr " " -
}

fhelp(){

FLAG="$1"
DESCRIPTION="$2"
DISTANCE_FLAG=30

WIDTH1=$(echo "a$FLAG" | wc -c ) 
WIDTH2=$(($(tput cols)-$DISTANCE_FLAG -$WIDTH1 ))

paste <(echo "$FLAG" | fold -w 30 ) <(echo "$DESCRIPTION" | fold -sw $(( $(tput cols) - $DISTANCE_FLAG -$WIDTH1     )) )| pr -t -e$(($DISTANCE_FLAG+$WIDTH1))

}


display-help(){

for i in c x y d m n o t h v
do
declare -a $i
done

c[1]="-c COMMAND CHAIN"
c[2]="Specify window commands from a command chain COMMAND CHAIN separated by commas (e.g 'bash;watch ls;watch lsblk') or by a newlines." 
x[1]="-x X"
x[2]="Specify the number of lines. This will overwrite the value guessed if command chain is given."
y[1]="-y Y"
y[2]="Specify the number of columns. This will overwrite the value guessed if command chain is given."
d[1]="-d DESTINATION PATH" 
d[2]="Specify the destination of the generated configuration file"
m[1]="-m WINDOW NUMBER"
m[2]="Move the cursor to WINDOW NUMBER. Windows are numbered from top-left to bottom right, line by lines."
n[1]="-n"             
n[2]="Prevent from executing screen. It only generate screen configuration file"
N[1]="-N"             
N[2]="Disable the interactive mode if no command chain are given"
o[1]="-o OPTION CHAIN"
o[2]="Add lines to the screen configuration file. OPTION CHAIN is a chain in the format 'OPTION_1;...;OPTION_N'. "

t[1]="-t"
t[2]="Print the newly generated screen configuration file on terminal and prevent screen from running."
h[1]="-h, --help"  
h[2]="Display help"
v[1]="-v" 
v[2]="Activate debug mode"

C1="${c[1]}
${d[1]}
${h[1]}
${m[1]}
${n[1]}
${N[1]}
${o[1]}
${t[1]}
${v[1]}
${x[1]}
${y[1]}"

C2="${c[2]}
${d[2]}
${h[2]}
${m[2]}
${n[2]}
${N[2]}
${o[2]}
${t[2]}
${v[2]}
${x[2]}
${y[2]}"
WIDTH=18
DIST=4
paste <(echo "$C1" | fold -w $WIDTH ) <(echo "$C2" | fold -w "$(( $(tput cols) - $DIST -$WIDTH ))"      ) | pr -t -e$((WIDTH+DIST))

}

function echo-word-middle-debug(){
    
    if [ "$CHECK_v" -eq 1 ]
    then
        echo-word-middle "$@"
    fi
}


# SET VARIABLES FROM FLAGS[ IMPROVE FLAG HANDLING IN LATER VERSIONS ]

CHECK_d=0
CHECK_v=0
CHECK_n=0
CHECK_t=0
CHECK_h=0
CHECK_N=0
CHECK_V=0
COMMAND_CHAIN=""
SCREEN_CONFIGURATION_FILE_GIVEN=""
NUMBER_OF_LINES_GIVEN=""
NUMBER_OF_COLUMNS_GIVEN=""
CURSOR_WINDOW_NUMBER_GIVEN=""
NUMBER_OF_COMMANDS=0

while [ $# -ge 1 ]
do
key="$1"

case $key in

-d)
SCREEN_CONFIGURATION_FILE_GIVEN="$2"
shift # past argument
;;
-y)
NUMBER_OF_LINES_GIVEN="$2"
shift # past argument
;;
-x)
NUMBER_OF_COLUMNS_GIVEN="$2"
shift # past argument
;;
-o)
OPTION_CHAIN="$2"
shift # past argument
;;
-n)
CHECK_n=1
 # past argument
;;
-t)
CHECK_t=1
 # past argument
;;
-v)
CHECK_v=1
;;
-V|--version)
CHECK_V=1
;;
-m)
CURSOR_WINDOW_NUMBER_GIVEN=$2
shift
;;
 # past argument
-h|--help)
CHECK_h=1
;;
-N)
CHECK_N=1
;;
-*)
echo "$0: $1: Unrecognized option"
echo "" 
display-help
;;
*)
A="$1"
COMMAND_CHAIN="${A//\*/+}"
;;
esac
shift # past argument or value
done
echo-word-middle-debug "Initial values"
echo-debug CHECK_n=$CHECK_n
echo-debug CHECK_t=$CHECK_t
echo-debug CHECK_v=$CHECK_v
echo-debug COMMAND_CHAIN=$COMMAND_CHAIN
echo-debug OPTION_CHAIN=$OPTION_CHAIN
echo-debug SCREEN_CONFIGURATION_FILE_GIVEN=$SCREEN_CONFIGURATION_FILE_GIVEN
echo-debug NUMBER_OF_LINES_GIVEN=$NUMBER_OF_LINES_GIVEN
echo-debug NUMBER_OF_COLUMNS_GIVEN=$NUMBER_OF_COLUMNS_GIVEN
echo-debug EDITOR=$DEFAULT_EDITOR

#DISPLAY HELP IF -h or --help FLAGS ARE SET
if [ $CHECK_V -eq 1 ]
then
    echo "screen-generator v$VERSION"
    exit
fi
if [ $CHECK_h -eq 1 ]
then
    display-help
    exit
fi

# INTERACTIVE MODE
if [ -z "$COMMAND_CHAIN" ] && [  "$CHECK_N" -eq 0 ] && [  "$CHECK_V" -eq 0 ]
then
echo-debug "Initiate interactive mode"
echo -n "screen-generator> "
STRING="screen-generator> "
while read -r COMMAND_INT ;
do

echo -n "$STRING"
if [ -z "$COMMAND_CHAIN" ]
    then
    COMMAND_CHAIN="$COMMAND_INT"
else
    COMMAND_CHAIN="$COMMAND_CHAIN; $COMMAND_INT"
fi
tput cuu1
tput hpa $HORIZONTAL_DISTANCE
printf '%s\n' "$COMMAND_CHAIN"
#tput sc
tput hpa $(echo $STRING| wc -c)
  done
echo " "
fi

#Command chain expansion

COMMAND_CHAIN_UNEXPANDED=$COMMAND_CHAIN
if ! [ -z "$(echo $COMMAND_CHAIN | grep '+' )" ]
then
echo-debug "Expanding the command chain"
DETECTED_PATTERNS="$(echo $COMMAND_CHAIN | grep -o "[^;,^ ]*+[^;,^ ]*" | sed 's/ //g')"
echo-debug "DETECTED_PATTERNS=$DETECTED_PATTERNS"
echo-debug "Number of detected patterns: "$( echo $DETECTED_PATTERNS|wc -w)

for PATTERN in $DETECTED_PATTERNS
do
echo-debug "PATTERN=$PATTERN"
COMMAND_WITH_PATTERN="$(echo $COMMAND_CHAIN | grep -o "[^;]*$PATTERN[^;]*" )"
echo-debug -e "COMMAND_WITH_PATTERN=$COMMAND_WITH_PATTERN"
PREFIX=$(echo $COMMAND_WITH_PATTERN | sed "s/\(.*\)[ ]*$PATTERN[ ]*\(.*\)/\1/")
echo-debug PREFIX=$PREFIX
SUFFIX=$(echo $COMMAND_WITH_PATTERN | sed "s/\([^ ].*\)[ ]*$PATTERN[ ]*\([^ ]*\)/\2/")
echo-debug SUFFIX=$SUFFIX
EXPANDED_COMMAND=""
for i in $(echo $PATTERN | sed 's/+/*/')
do
echo-debug "Adding command \"$PREFIX$i$SUFFIX\" linked to file \"$(echo $i| sed 's/^[ ]*//;s/[ ]*$//;s/ /\\\ /g')\""
EXPANDED_COMMAND="$EXPANDED_COMMAND ; $PREFIX $(echo $i| sed 's/^[ ]*//;s/[ ]*$//;s/ /\\\ /g') $SUFFIX"
echo-debug "EXPANDED_COMMAND after adding $i: "$EXPANDED_COMMAND
done
EXPANDED_COMMAND=${EXPANDED_COMMAND/;/}
echo-debug "EXPANDED_COMMAND_WITHOUT_COLON=$EXPANDED_COMMAND"
echo-debug EXPANDED_COMMAND=$EXPANDED_COMMAND
COMMAND_CHAIN=${COMMAND_CHAIN/$COMMAND_WITH_PATTERN/$EXPANDED_COMMAND}
echo-debug EXPANDED_COMMAND_CHAIN=$COMMAND_CHAIN
done
fi


# Guess the number of lines and columns if a command chain is given
if  ! [ -z "$COMMAND_CHAIN" ]
    then

NUMBER_OF_COMMANDS_GIVEN=$(($(echo $COMMAND_CHAIN  | sed 's/;$//' |sed 's/^\;//'|grep -o ";" | wc -l)+1))
NUMBER_OF_COMMANDS=${NUMBER_OF_COMMANDS_GIVEN:-0}
echo-word-middle-debug "Calculation of the number of commands"
echo-debug "NUMBER_OF_COMMANDS=$NUMBER_OF_COMMANDS"

#N_COL=2 AND N_LINE IS GUESSED IF N_TOT<7
if [ $NUMBER_OF_COMMANDS -lt "7" ]
    then
    echo-debug "Assume that NUMBER_OF_COMMANDS<7"
NUMBER_OF_COLUMNS_FOR_COMMANDS=2 
if [[ $(($NUMBER_OF_COMMANDS % 2)) = 0 ]]
    then
echo-debug "NUMBER_OF_COMMANDS % 2 equal to 0"
NUMBER_OF_LINES_FOR_COMMANDS=$((NUMBER_OF_COMMANDS/2))
    else
echo-debug "NUMBER_OF_COMMANDS % 2 non equal to 0"
NUMBER_OF_LINES_FOR_COMMANDS=$(((NUMBER_OF_COMMANDS+1)/2))
fi

#N_COL=3 AND N_LINE IS GUESSED IF N_TOT<13
elif [ $NUMBER_OF_COMMANDS -gt 6 ]
then

NUMBER_OF_COLUMNS_FOR_COMMANDS=3
    echo-debug "assume that NUMBER_OF_COMMANDS > 6"

    if [[ $(($NUMBER_OF_COMMANDS % 3)) = 0 ]]
    then
NUMBER_OF_LINES_FOR_COMMANDS=$((NUMBER_OF_COMMANDS/3))
    elif [[ $((NUMBER_OF_COMMANDS % 3)) = 1 ]]
    then
        echo-debug "NUMBER_OF_COMMANDS % 3=1"
        echo-debug "Adding 2..."
NUMBER_OF_LINES_FOR_COMMANDS=$(((NUMBER_OF_COMMANDS+2)/3))
else
    echo-debug "Adding 1..."
    echo-debug "NUMBER_OF_COMMANDS % 3=2"
NUMBER_OF_LINES_FOR_COMMANDS=$(((NUMBER_OF_COMMANDS+1)/3))
fi
fi

echo-debug "Finishing guessing the number of lines and columns"
else # COMMAND CHAIN NULL

# IN CASE THE COMMAND CHAIN IS NULL, CHOOSE BETWEEN 1X2 AND 2X1 DEPENDING ON THE TERMINAL SIZE
echo-debug "Choosing between 1x2 and 2x1 since no default values and commands are given"

if [ -z "$DEFAULT_NUMBER_OF_LINES" ] 
then
echo-debug "Assume DEFAULT_NUMBER_OF_LINES not given"

    if [ -z $DEFAULT_NUMBER_OF_COLUMNS ]
    then
echo-debug "Assume DEFAULT_NUMBER_OF_COLUMNS not given"

        if [ $(tput cols) -gt $(tput lines) ]
        then
NUMBER_OF_LINES_FOR_COMMANDS=2
NUMBER_OF_COLUMNS_FOR_COMMANDS=1
        else
NUMBER_OF_LINES_FOR_COMMANDS=1
NUMBER_OF_COLUMNS_FOR_COMMANDS=2
        fi

    else

NUMBER_OF_LINES_FOR_COMMANDS=1
NUMBER_OF_COLUMNS_FOR_COMMANDS=$DEFAULT_NUMBER_OF_COLUMNS
    fi

else
    if [ -z $DEFAULT_NUMBER_OF_COLUMNS ]
    then
NUMBER_OF_LINES_FOR_COMMANDS=$DEFAULT_NUMBER_OF_LINES
NUMBER_OF_COLUMNS_FOR_COMMANDS=1
    else
NUMBER_OF_LINES_FOR_COMMANDS=$DEFAULT_NUMBER_OF_LINES
NUMBER_OF_COLUMNS_FOR_COMMANDS=$DEFAULT_NUMBER_OF_COLUMNS

    fi

fi
fi
echo-word-middle-debug "Determination of the number of lines and columns"
echo-debug NUMBER_OF_LINES_FOR_COMMANDS=$NUMBER_OF_LINES_FOR_COMMANDS
echo-debug NUMBER_OF_COLUMNS_FOR_COMMANDS=$NUMBER_OF_COLUMNS_FOR_COMMANDS

echo-debug "NUMBER_OF_COLUMNS_BEFORE_CHANGE=$NUMBER_OF_COLUMNS_FOR_COMMANDS"
echo-debug "NUMBER_OF_LINES_BEFORE_CHANGE=$NUMBER_OF_LINES"

NUMBER_OF_LINES=${NUMBER_OF_LINES_GIVEN:-$NUMBER_OF_LINES_FOR_COMMANDS} 
NUMBER_OF_COLUMNS=${NUMBER_OF_COLUMNS_GIVEN:-$NUMBER_OF_COLUMNS_FOR_COMMANDS} 

echo-debug "NUMBER_OF_COLUMNS_AFTER_CHANGE=$NUMBER_OF_COLUMNS"
echo-debug "NUMBER_OF_LINES_AFTER_CHANGE=$NUMBER_OF_LINES"

echo-word-middle-debug "Determination of the number of lines and columns"
echo-debug NUMBER_OF_LINES_FOR_COMMANDS=$NUMBER_OF_LINES_FOR_COMMANDS
echo-debug NUMBER_OF_COLUMNS_FOR_COMMANDS=$NUMBER_OF_COLUMNS_FOR_COMMANDS

echo-debug "NUMBER_OF_COLUMNS_BEFORE_CHANGE=$NUMBER_OF_COLUMNS_FOR_COMMANDS"
echo-debug "NUMBER_OF_LINES_BEFORE_CHANGE=$NUMBER_OF_LINES"

NUMBER_OF_LINES=${NUMBER_OF_LINES_GIVEN:-$NUMBER_OF_LINES_FOR_COMMANDS} 
NUMBER_OF_COLUMNS=${NUMBER_OF_COLUMNS_GIVEN:-$NUMBER_OF_COLUMNS_FOR_COMMANDS} 

echo-debug "NUMBER_OF_COLUMNS_AFTER_CHANGE=$NUMBER_OF_COLUMNS"
echo-debug "NUMBER_OF_LINES_AFTER_CHANGE=$NUMBER_OF_LINES"
echo-word-middle-debug "Define configuration name"

if [ "$NUMBER_OF_COMMANDS" -eq "0" ]
    then
echo-debug "Choosing short name for SCREEN_CONFIGURATION_FILE"
SCREEN_CONFIGURATION_FILE=${SCREEN_CONFIGURATION_FILE_GIVEN:-/tmp/screenrc-${NUMBER_OF_LINES}x${NUMBER_OF_COLUMNS}}
else
echo-debug "Choosing long name for SCREEN_CONFIGURATION_FILE"
SCREEN_CONFIGURATION_FILE=${SCREEN_CONFIGURATION_FILE_GIVEN:-/tmp/screenrc-${NUMBER_OF_LINES}x${NUMBER_OF_COLUMNS}-$(echo "$COMMAND_CHAIN_UNEXPANDED"|sed 's/;$//;s/\;/_/g;s/ /-/g;s|/|-|g;s/--/-/g'|sed "s/'//g"|sed -r 's/[|]/_/g' )}  # FILNAME OF MORE THAN 256 CHARACTERS ARE NOT ALLOWED
    fi
echo-debug "SCREEN_CONFIGURATION_FILE=$SCREEN_CONFIGURATION_FILE"
SCREEN_CONFIGURATION_FILE=$(echo $SCREEN_CONFIGURATION_FILE | colrm 255)
echo-debug "SCREEN_CONFIGURATION_FILE=$SCREEN_CONFIGURATION_FILE"

#INITIALIZE THE FILE TO EMPTY FILE IN CASE NON-EMPTY
echo-debug "name of configuration file: $SCREEN_CONFIGURATION_FILE"
echo "" > $SCREEN_CONFIGURATION_FILE


# ADDING OPTIONS SPECIFIED BY -o FLAG


if ! [ -z $OPTION_CHAIN ]
    then
echo "$OPTION_CHAIN"| sed 's/;$[ ]*//;s/\;/\n/g' >> $SCREEN_CONFIGURATION_FILE
    fi

# ADDING COMMANDS TO THE CONFIGURATION FILE FROM THE COMMAND CHAIN

LINE_NUMBER=0
if ! [  "$NUMBER_OF_COMMANDS" -eq "0" ]
    then
echo-debug "Assume NUMBER_OF_COMMANDS is not 0"
echo "$COMMAND_CHAIN"| sed -e 's/;$//;s/\;/\n/g' -|sed 's/^cat /less /'|sed  "s/^ls /watch ls /" |sed 's/^/screen /' | nl | awk '{ t = $1; $1 = $2; $2 = t; print; }'  >> $SCREEN_CONFIGURATION_FILE
else
echo-debug "Assume NUMBER_OF_COMMANDS is 0"

fi

if [ "$NUMBER_OF_COMMANDS" -lt "$(( $NUMBER_OF_LINES*$NUMBER_OF_COLUMNS ))"  ]
    then

for i in $(seq $(( $NUMBER_OF_COMMANDS +1)) $(( $NUMBER_OF_LINES * $NUMBER_OF_COLUMNS)) )

    do
        echo "screen $i $SHELL_NAME" >> $SCREEN_CONFIGURATION_FILE
    done
echo "" >> $SCREEN_CONFIGURATION_FILE
fi

# CREATE TOP LEFT WINDOW

echo "select 1" >> $SCREEN_CONFIGURATION_FILE

#CREATE FIRST LINE FROM 2ND COLUMN

for j in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "split -v">> $SCREEN_CONFIGURATION_FILE
echo "focus right">> $SCREEN_CONFIGURATION_FILE
echo "select $(($j+1))" >> $SCREEN_CONFIGURATION_FILE
done

# GO BACK TO FIRST COLUMN

for i in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "focus left" >> $SCREEN_CONFIGURATION_FILE
done

# SPLIT TO CREATE LINES

# LOOP OVER LINES EXEPT THE FIRST ALREADY CREATED

for k in $(seq $(($NUMBER_OF_LINES-1)))
do
echo "split" >> $SCREEN_CONFIGURATION_FILE
echo "focus down" >> $SCREEN_CONFIGURATION_FILE

# FIRST COLUMN, LINE $k

echo "select $(($NUMBER_OF_COLUMNS*$k+1))" >> $SCREEN_CONFIGURATION_FILE


# LOOP OVER COLUMNS


for j in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "focus right" >> $SCREEN_CONFIGURATION_FILE
echo "split" >> $SCREEN_CONFIGURATION_FILE
echo "focus down" >> $SCREEN_CONFIGURATION_FILE

echo "select $(($NUMBER_OF_COLUMNS*$k+$j+1))" >> $SCREEN_CONFIGURATION_FILE
done

# MOVE THE CURSOR TO THE LEFT

for l in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "focus left" >> $SCREEN_CONFIGURATION_FILE
done
done

# MOVE THE CURSOR TO THE TOP LEFT WINDOW


for i in $(seq $(($NUMBER_OF_LINES-1)) )
do
echo "focus up" >> $SCREEN_CONFIGURATION_FILE
done
echo-word-middle-debug "Move cursor to the proper window"
#MOVE CURSOR TO THE FIRST WINDOW WITH $EDITOR, $SHELL_NAME OR THE WINDOW NUMBER SPECIFIED BY THE USER
# FIND WHETHER THERE IS $EDITOR OR $SHELL_NAME IN THE COMMAND CHAIN
if ! [ -z  "$( echo "$COMMAND_CHAIN" | grep "$DEFAULT_EDITOR")" ]
then
    CURSOR_WINDOW_NUMBER_GIVEN="$(echo "$COMMAND_CHAIN" | sed 's/^[ ]*\;//' |  sed 's/;[ ]*$//'  | sed 's/;/\n/g' | nl | grep "$DEFAULT_EDITOR" | awk '{ print $1 }')"
    
echo-debug "Taking the window number of the first editor at window number $CURSOR_WINDOW_NUMBER_GIVEN"




    
else
if ! [ -z  "$( echo $COMMAND_CHAIN  | grep "$SHELL_NAME")" ]
    then
    CURSOR_WINDOW_NUMBER_GIVEN="$(echo "$COMMAND_CHAIN" | grep -o ".*$SHELL_NAME[^\;]*"| sed 's/^[ ]*\;//' |  sed 's/;[ ]*$[ ]*//'  | sed 's/$/\;/'|grep -o "\;" | wc -l)"
    
    echo-debug "Taking the window number of the first shell: $CURSOR_WINDOW_NUMBER_GIVEN"
    else

        if [ "$NUMBER_OF_COMMANDS_GIVEN" = "$(($NUMBER_OF_COLUMNS*$NUMBER_OF_LINES))" ] 
            then
            # CHANGE_0.4
            CURSOR_WINDOW_NUMBER_GIVEN=1
        fi

fi
fi
CURSOR_WINDOW_NUMBER=${CURSOR_WINDOW_NUMBER_GIVEN:- $(($NUMBER_OF_COMMANDS_GIVEN + 1 )) }
echo-debug "CURSOR_WINDOW_NUMBER=$CURSOR_WINDOW_NUMBER"
echo-debug  "number of column for the cursor move calculation: $NUMBER_OF_COLUMN"
echo-debug  "number of lines for the cursor move calculation: $NUMBER_OF_LINES"
M_RIGHT=$(((CURSOR_WINDOW_NUMBER-1)%NUMBER_OF_COLUMNS))
M_DOWN=$((( CURSOR_WINDOW_NUMBER-1 -(CURSOR_WINDOW_NUMBER-1)%NUMBER_OF_COLUMNS      )/NUMBER_OF_LINES )) 
echo-debug "Moving right ${M_RIGHT:-0} times"
for i in $(seq $M_RIGHT )
do
echo "focus right" >> $SCREEN_CONFIGURATION_FILE
done
echo-debug "Moving down ${M_DOWN:-0} times"
for p in $(seq $M_DOWN)
do
echo "focus down" >> $SCREEN_CONFIGURATION_FILE
done

#MOVE CURSOR AT TOP LEFT IF NO SHELL_NAME

#INCLUDE SHORTCUTS IN THE CONFIGURATION FILE

echo $DEFAULT_OPTIONS>> $SCREEN_CONFIGURATION_FILE
echo "$DEFAULT_SHORTCUTS">> $SCREEN_CONFIGURATION_FILE
if [ $CHECK_t -eq "0" ]
    then
echo -n "Configuration file of size ${NUMBER_OF_LINES}x${NUMBER_OF_COLUMNS}" 
if ! [ -z "$COMMAND_CHAIN" ]
    then
echo -n " with command chain \"$COMMAND_CHAIN\""
fi
echo -ne " generated at $(readlink -f $SCREEN_CONFIGURATION_FILE)\n"
fi


# START SCREEN UNLESS OPTION -n IS SET

if [ $CHECK_n -eq "0" ] && [ $CHECK_t -eq "0" ] && [ $CHECK_v -eq "0" ]
then
echo -e "\nStarting screen from $SCREEN_CONFIGURATION_FILE"
screen -c $SCREEN_CONFIGURATION_FILE
fi

# CAT SCREEN CONFIGURATION FILE if -t IS SET

if ! [ $CHECK_t -eq "0" ] || ! [ $CHECK_v -eq "0" ]
then
# PRINT HORIZONTAL LINE WITH WORD IN THE MIDDLE
echo-word-middle "$SCREEN_CONFIGURATION_FILE"
cat $SCREEN_CONFIGURATION_FILE
fi
