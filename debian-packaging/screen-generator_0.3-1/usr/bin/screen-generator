#!/bin/bash
#`screen-generator` generates screen configuration files and launches screen by providing chains of commands or window configurations


# DEFINE DEFAULT VARIALBES

DEFAULT_NUMBER_OF_LINES=1
DEFAULT_NUMBER_OF_COLUMNS=2
DEFAULT_SHORTCUTS='bindkey "^o" only
bindkey "^j" focus down
bindkey "^k" focus up
bindkey "^l" focus right
bindkey "^h" focus left
bindkey "^y" quit 
bindkey "^s" split
bindkey "^v" split -v
startup_message off'


# DEFINE DEBUG FUNCTION

function echo-debug(){
    
    if [ "$CHECK_v" -eq 1 ]
        then
            echo $@
        fi
}
function cat-debug(){
    
    if [ "$CHECK_v" -eq 1 ]
        then
            cat $@
        fi
}

# DEFINE DISPLAY FUNCTIONS

function echo-word-middle(){
WORD=$@
NUMBER_OF_SPACES_SURROUNDING_THE_WORD=1
TERMINAL_WIDTH=$(tput cols)
WORD_SIZE=$(($(echo "$@" | wc -c ) -1 ))
NUMBER_OF_SYMBOLS=$(( $TERMINAL_WIDTH - $WORD_SIZE - 2*$NUMBER_OF_SPACES_SURROUNDING_THE_WORD ))
LENGTH_OF_RIGHT_PART=$((NUMBER_OF_SYMBOLS/2 + $NUMBER_OF_SYMBOLS%2/2 ))
LENGTH_OF_LEFT_PART=$(( $TERMINAL_WIDTH - $WORD_SIZE -2*NUMBER_OF_SPACES_SURROUNDING_THE_WORD - $LENGTH_OF_RIGHT_PART      ))

printf '%*s' "$LENGTH_OF_RIGHT_PART" '' | tr " " -
printf '%*s' $NUMBER_OF_SPACES_SURROUNDING_THE_WORD
printf "$WORD"
printf '%*s' $NUMBER_OF_SPACES_SURROUNDING_THE_WORD
printf '%*s\n' "$LENGTH_OF_LEFT_PART" '' | tr " " -
}

function echo-word-middle-debug(){
    
    if [ "$CHECK_v" -eq 1 ]
    then
        echo-word-middle "$@"
    fi
}


# SET VARIABLES FROM FLAGS[ IMPROVE FLAG HANDLING IN LATER VERSIONS ]

CHECK_c=0 
CHECK_d=0
CHECK_v=0
CHECK_n=0
CHECK_t=0
CHECK_h=0
COMMAND_CHAIN=""
SCREEN_CONFIGURATION_FILE_GIVEN=""
NUMBER_OF_LINES_GIVEN=""
NUMBER_OF_COLUMNS_GIVEN=""
CURSOR_WINDOW_NUMBER_GIVEN=""
NUMBER_OF_COMMANDS=0

while [ $# -ge 1 ]
do
key="$1"

case $key in

-c)
A=$2
COMMAND_CHAIN="${A//\*/+}"
shift # past argument
;;
-d)
SCREEN_CONFIGURATION_FILE_GIVEN="$2"
shift # past argument
;;
-y)
NUMBER_OF_LINES_GIVEN="$2"
shift # past argument
;;
-x)
NUMBER_OF_COLUMNS_GIVEN="$2"
shift # past argument
;;
-o)
OPTION_CHAIN="$2"
shift # past argument
;;
-n)
CHECK_n=1
 # past argument
;;
-t)
CHECK_t=1
 # past argument
;;
-v)
CHECK_v=1
;;
-m)
CURSOR_WINDOW_NUMBER_GIVEN=$2
shift
;;
 # past argument
-h|--help)
CHECK_h=1
;;
esac
shift # past argument or value
done
echo-word-middle-debug "Initial values"
echo-debug CHECK_n=$CHECK_n
echo-debug CHECK_t=$CHECK_t
echo-debug CHECK_v=$CHECK_v
echo-debug COMMAND_CHAIN=$COMMAND_CHAIN
echo-debug OPTION_CHAIN=$OPTION_CHAIN
echo-debug SCREEN_CONFIGURATION_FILE_GIVEN=$SCREEN_CONFIGURATION_FILE_GIVEN
echo-debug NUMBER_OF_LINES_GIVEN=$NUMBER_OF_LINES_GIVEN
echo-debug NUMBER_OF_COLUMNS_GIVEN=$NUMBER_OF_COLUMNS_GIVEN
echo-debug NUMBER_OF_COMMANDS=$NUMBER_OF_COMMANDS 

#DISPLAY HELP IF -h or --help FLAGS ARE SET

if [ $CHECK_h -eq 1 ]
then
    echo -ne '
-c COMMAND CHAIN            Specify window commands from a command chain COMMAND CHAIN separated by commas (e.g "bash;watch ls;watch lsblk") or by a newlines. 
-x X                        Specify the number of lines. This will overwrite the value guessed if command chain is given.
-y Y                        Specify the number of columns. This will overwrite the value guessed if command chain is given.
-d DESTINATION PATH         Specify the destination of the generated configuration file (/tmp/.screenrc-XxY-[COMMAND CHAIN] if not mentioned )
-m WINDOW NUMBER            Move the cursor to WINDOW NUMBER. Windows are numbered from top-left to bottom right, line by lines. The cursor is set to the first added shell if not specifies
-n                          Prevent from executing screen. It only generate screen configuration file ( given by DESTINATION PATH or /tmp/.screenrc-XxY )
-o OPTION CHAIN             Add lines to the screen configuration file. OPTION CHAIN is a chain in the format "OPTION_1;...;OPTION_N". 
-t                          Print the newly generated screen configuration file on terminal and prevent screen from running.
-h, --help                  Display help
-v                          Activate debug mode.\n'

 else
COMMAND_CHAIN_UNEXPANDED=$COMMAND_CHAIN
if ! [ -z "$(echo $COMMAND_CHAIN | grep '+' )" ]
then
echo-debug "Expanding the command chain"
DETECTED_PATTERNS="$(echo $COMMAND_CHAIN | grep -o "[^;,^ ]*+[^;,^ ]*" | sed 's/ //g')"
echo-debug "DETECTED_PATTERNS=$DETECTED_PATTERNS"
echo-debug "Number of detected patterns: "$( echo $DETECTED_PATTERNS|wc -w)

for PATTERN in $DETECTED_PATTERNS
do
echo-debug "PATTERN=$PATTERN"
COMMAND_WITH_PATTERN="$(echo $COMMAND_CHAIN | grep -o "[^;]*$PATTERN[^;]*" )"
echo-debug -e "COMMAND_WITH_PATTERN=$COMMAND_WITH_PATTERN"
PREFIX=$(echo $COMMAND_WITH_PATTERN | sed "s/\(.*\)[ ]*$PATTERN[ ]*\(.*\)/\1/")
echo-debug PREFIX=$PREFIX
SUFFIX=$(echo $COMMAND_WITH_PATTERN | sed "s/\([^ ].*\)[ ]*$PATTERN[ ]*\([^ ]*\)/\2/")
echo-debug SUFFIX=$SUFFIX
EXPANDED_COMMAND=""
for i in $(echo $PATTERN | sed 's/+/*/')
do
echo-debug "Adding command \"$PREFIX$i$SUFFIX\" linked to file \"$(echo $i| sed 's/^[ ]*//;s/[ ]*$//;s/ /\\\ /g')\""
EXPANDED_COMMAND="$EXPANDED_COMMAND ; $PREFIX $(echo $i| sed 's/^[ ]*//;s/[ ]*$//;s/ /\\\ /g') $SUFFIX"
echo-debug "EXPANDED_COMMAND after adding $i: "$EXPANDED_COMMAND
done
EXPANDED_COMMAND=${EXPANDED_COMMAND/;/}
echo-debug "EXPANDED_COMMAND_WITHOUT_COLON=$EXPANDED_COMMAND"
echo-debug " "
echo-debug EXPANDED_COMMAND=$EXPANDED_COMMAND
COMMAND_CHAIN=${COMMAND_CHAIN/$COMMAND_WITH_PATTERN/$EXPANDED_COMMAND}
echo-debug EXPANDED_COMMAND_CHAIN=$COMMAND_CHAIN
done
fi


# GUESS THE NUMBER OF LINES AND COLUMNS IF -c is SET
if  ! [ -z "$COMMAND_CHAIN" ]
    then
NUMBER_OF_COMMANDS_GIVEN=$(($(echo $COMMAND_CHAIN  | sed 's/;$//' |sed 's/^\;//'|grep -o ";" | wc -l)+1))
NUMBER_OF_COMMANDS=${NUMBER_OF_COMMANDS_GIVEN:-0}
echo-debug " "
echo-word-middle-debug "Calculation of the number of commands"
echo-debug "NUMBER_OF_COMMANDS=$NUMBER_OF_COMMANDS"

#N_COL=2 AND N_LINE IS GUESSED IF N_TOT<7
if [ $NUMBER_OF_COMMANDS -lt "7" ]
    then
    echo-debug "assume that NUMBER_OF_COMMANDS<7"
NUMBER_OF_COLUMNS_FOR_COMMANDS=2 
if [[ $(($NUMBER_OF_COMMANDS % 2)) = 0 ]]
    then
NUMBER_OF_LINES_FOR_COMMANDS=$((NUMBER_OF_COMMANDS/2))
    else
NUMBER_OF_LINES_FOR_COMMANDS=$(((NUMBER_OF_COMMANDS+1)/2))
fi

#N_COL=3 AND N_LINE IS GUESSED IF N_TOT<13
elif [ $NUMBER_OF_COMMANDS -gt 6 ]
then

NUMBER_OF_COLUMNS_FOR_COMMANDS=3
    echo-debug "assume that NUMBER_OF_COMMANDS > 6"

if [[ $(($NUMBER_OF_COMMANDS % 3)) = 0 ]]
    then
NUMBER_OF_LINES_FOR_COMMANDS=$((NUMBER_OF_COMMANDS/3))
    elif [[ $((NUMBER_OF_COMMANDS % 3)) = 1 ]]
    then
        echo-debug "NUMBER_OF_COMMANDS % 3=1"
    echo-debug "Adding 2..."
NUMBER_OF_LINES_FOR_COMMANDS=$(((NUMBER_OF_COMMANDS+2)/3))
else
    echo-debug "Adding 1..."
        echo-debug "NUMBER_OF_COMMANDS % 3=2"
NUMBER_OF_LINES_FOR_COMMANDS=$(((NUMBER_OF_COMMANDS+1)/3))
fi
fi


#TAKE DEFAULTS COLUMNS AND LINES VALUES (MODIFIED LATER IF X AND Y ARE SET

else
NUMBER_OF_LINES_FOR_COMMANDS=$DEFAULT_NUMBER_OF_LINES
NUMBER_OF_COLUMNS_FOR_COMMANDS=$DEFAULT_NUMBER_OF_COLUMNS
fi

echo-word-middle-debug "Determination of the number of lines and columns"
echo-debug NUMBER_OF_LINES_FOR_COMMANDS=$NUMBER_OF_LINES_FOR_COMMANDS
echo-debug NUMBER_OF_COLUMNS_FOR_COMMANDS=$NUMBER_OF_COLUMNS_FOR_COMMANDS

echo-debug "NUMBER_OF_COLUMNS_BEFORE_CHANGE=$NUMBER_OF_COLUMNS_FOR_COMMANDS"
echo-debug "NUMBER_OF_LINES_BEFORE_CHANGE=$NUMBER_OF_LINES"

NUMBER_OF_LINES=${NUMBER_OF_LINES_GIVEN:-$NUMBER_OF_LINES_FOR_COMMANDS} 
NUMBER_OF_COLUMNS=${NUMBER_OF_COLUMNS_GIVEN:-$NUMBER_OF_COLUMNS_FOR_COMMANDS} 

echo-debug "NUMBER_OF_COLUMNS_AFTER_CHANGE=$NUMBER_OF_COLUMNS"
echo-debug "NUMBER_OF_LINES_AFTER_CHANGE=$NUMBER_OF_LINES"
echo-word-middle-debug "Define configuration name"
if [ "$NUMBER_OF_COMMANDS" -eq "0" ]
    then
echo-debug "Choosing short name for SCREEN_CONFIGURATION_FILE"
SCREEN_CONFIGURATION_FILE=${SCREEN_CONFIGURATION_FILE_GIVEN:-/tmp/screenrc-${NUMBER_OF_LINES}x${NUMBER_OF_COLUMNS}}
else
echo-debug "Choosing long name for SCREEN_CONFIGURATION_FILE"
SCREEN_CONFIGURATION_FILE=${SCREEN_CONFIGURATION_FILE_GIVEN:-/tmp/screenrc-${NUMBER_OF_LINES}x${NUMBER_OF_COLUMNS}-$(echo "$COMMAND_CHAIN_UNEXPANDED"|sed 's/;$//;s/\;/_/g;s/ /-/g;s#/#-#g;s/--/-/g'|sed "s/'//g"|sed -r 's/[|]/_/g' )}  # FILNAME OF MORE THAN 256 CHARACTERS ARE NOT ALLOWED
    fi
echo-debug "SCREEN_CONFIGURATION_FILE=$SCREEN_CONFIGURATION_FILE"
SCREEN_CONFIGURATION_FILE=$(echo $SCREEN_CONFIGURATION_FILE | colrm 255)
echo-debug "SCREEN_CONFIGURATION_FILE=$SCREEN_CONFIGURATION_FILE"

#INITIALIZE THE FILE TO EMPTY FILE IN CASE NON-EMPTY

echo "" > $SCREEN_CONFIGURATION_FILE


# ADDING OPTIONS SPECIFIED BY -o FLAG


if ! [ -z $OPTION_CHAIN ]
    then
echo "$OPTION_CHAIN"| sed 's/;$[ ]*//;s/\;/\n/g' >> $SCREEN_CONFIGURATION_FILE
    fi

# ADDING COMMANDS TO THE CONFIGURATION FILE FROM THE COMMAND CHAIN

LINE_NUMBER=0
if ! [  "$NUMBER_OF_COMMANDS" -eq "0" ]
    then
echo-debug "Assume NUMBER_OF_COMMANDS is not 0"
echo "$COMMAND_CHAIN"| sed -e 's/;$//;s/\;/\n/g' -|sed 's/^cat /less /'|sed  "s/^ls /watch ls /"|sed 's/^/screen /' | nl | awk ' { t = $1; $1 = $2; $2 = t; print; }'  >> $SCREEN_CONFIGURATION_FILE
else
echo-debug "Assume NUMBER_OF_COMMANDS is 0"

fi

echo-word-middle-debug "Generate the screenrc"
if [ "$NUMBER_OF_COMMANDS" -lt "$(( $NUMBER_OF_LINES * $NUMBER_OF_COLUMNS ))"  ]
    then

for i in $(seq $(( $NUMBER_OF_COMMANDS +1)) $(( $NUMBER_OF_LINES * $NUMBER_OF_COLUMNS)) )

    do
        echo "screen $i $SHELL" >> $SCREEN_CONFIGURATION_FILE
    done
echo "" >> $SCREEN_CONFIGURATION_FILE
fi

# CREATE TOP LEFT WINDOW

echo "select 1" >> $SCREEN_CONFIGURATION_FILE
echo-debug "for j in $(seq $(($NUMBER_OF_COLUMNS-1)))"

#CREATE FIRST LINE FROM 2ND COLUMN

for j in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "split -v">> $SCREEN_CONFIGURATION_FILE
echo "focus right">> $SCREEN_CONFIGURATION_FILE
echo-debug "select $(($j+1))"
echo "select $(($j+1))" >> $SCREEN_CONFIGURATION_FILE
done


# GO BACK TO FIRST COLUMN

for i in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "focus left" >> $SCREEN_CONFIGURATION_FILE
done

# SPLIT TO CREATE LINES

# LOOP OVER LINES EXEPT THE FIRST ALREADY CREATED

echo-debug "for k in $(seq $(($NUMBER_OF_LINES-1)))"
for k in $(seq $(($NUMBER_OF_LINES-1)))
do
echo "split" >> $SCREEN_CONFIGURATION_FILE
echo "focus down" >> $SCREEN_CONFIGURATION_FILE

# FIRST COLUMN, LINE $k

echo-debug "select $(($NUMBER_OF_COLUMNS*$k+1))" 
echo "select $(($NUMBER_OF_COLUMNS*$k+1))" >> $SCREEN_CONFIGURATION_FILE



# LOOP OVER COLUMNS


for j in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "focus right" >> $SCREEN_CONFIGURATION_FILE
echo "split" >> $SCREEN_CONFIGURATION_FILE
echo "focus down" >> $SCREEN_CONFIGURATION_FILE

echo "select $(($NUMBER_OF_COLUMNS*$k+$j+1))" >> $SCREEN_CONFIGURATION_FILE
done

# MOVE THE CURSOR TO THE LEFT


for l in $(seq $(($NUMBER_OF_COLUMNS-1)))
do
echo "focus left" >> $SCREEN_CONFIGURATION_FILE
done
done

# MOVE THE CURSOR TO THE TOP LEFT WINDOW


for i in $(seq $(($NUMBER_OF_LINES-1)) )
do
echo "focus up" >> $SCREEN_CONFIGURATION_FILE
done

#MOVE CURSOR TO THE FIRST SHELL OR THE WINDOW NUMBER SPECIFIED BY THE USER

if [ $NUMBER_OF_COMMANDS_GIVEN -eq $(($NUMBER_OF_COLUMNS*$NUMBER_OF_LINES)) ] # CHANGE_0.4
then
CURSOR_WINDOW_NUMBER=1
else
CURSOR_WINDOW_NUMBER=${CURSOR_WINDOW_NUMBER_GIVEN:- $(($NUMBER_OF_COMMANDS_GIVEN + 1 )) }
fi
echo-debug "CURSOR_WINDOW_NUMBER=$CURSOR_WINDOW_NUMBER"
M_RIGHT=$(((CURSOR_WINDOW_NUMBER-1)%NUMBER_OF_COLUMNS))
echo-debug M_RIGHT=$CURSOR_WINDOW_NUMBER-1%$NUMBER_OF_COLUMNS+1
M_DOWN=$((( CURSOR_WINDOW_NUMBER-1 -(CURSOR_WINDOW_NUMBER-1)%NUMBER_OF_COLUMNS      )/NUMBER_OF_LINES )) 
echo-debug Moving right $M_RIGHT times 
for i in $(seq $M_RIGHT )
do
echo "focus right" >> $SCREEN_CONFIGURATION_FILE
done
echo-debug Moving down $M_DOWN times 
for p in $(seq $M_DOWN)
do
echo "focus down" >> $SCREEN_CONFIGURATION_FILE
done

#MOVE CURSOR AT TOP LEFT IF NO SHELL

#INCLUDE SHORTCUTS IN THE CONFIGURATION FILE

echo $DEFAULT_OPTIONS>> $SCREEN_CONFIGURATION_FILE
echo "$DEFAULT_SHORTCUTS">> $SCREEN_CONFIGURATION_FILE
if [ $CHECK_t -eq "0" ]
    then
echo -n "Configuration file of size ${NUMBER_OF_LINES}x${NUMBER_OF_COLUMNS}" 
if ! [ -z "$COMMAND_CHAIN" ]
    then
echo -n " with command chain \"$COMMAND_CHAIN\""
fi
echo -ne " generated at $(readlink -f $SCREEN_CONFIGURATION_FILE)\n"
fi

# START SCREEN UNLESS OPTION -n IS SET

if [ $CHECK_n -eq "0" ] && [ $CHECK_t -eq "0" ] && [ $CHECK_v -eq "0" ]
then
echo -e "\nStarting screen from $SCREEN_CONFIGURATION_FILE"
screen -c $SCREEN_CONFIGURATION_FILE
fi

# CAT SCREEN CONFIGURATION FILE if -t IS SET

if ! [ $CHECK_t -eq "0" ]
then

# PRINT HORIZONTAL LINE WITH WORD IN THE MIDDLE


echo-word-middle "$SCREEN_CONFIGURATION_FILE"
cat $SCREEN_CONFIGURATION_FILE
fi

fi #help
